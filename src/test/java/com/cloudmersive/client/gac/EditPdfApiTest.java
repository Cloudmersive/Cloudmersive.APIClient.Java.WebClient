/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudmersive.client.gac;

import com.cloudmersive.client.gac.model.AddPdfAnnotationRequest;
import java.math.BigDecimal;
import java.io.File;
import com.cloudmersive.client.gac.model.GetPdfAnnotationsResult;
import com.cloudmersive.client.gac.model.PdfFormFields;
import com.cloudmersive.client.gac.model.PdfMetadata;
import com.cloudmersive.client.gac.model.PdfTextByPageResult;
import com.cloudmersive.client.gac.model.SetPdfFormFieldsRequest;
import com.cloudmersive.client.gac.model.SetPdfMetadataRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for EditPdfApi
 */
@Ignore
public class EditPdfApiTest {

    private final EditPdfApi api = new EditPdfApi();

    
    /**
     * Add one or more PDF annotations, comments in the PDF document
     *
     * Adds one or more annotations, comments to a PDF document.
     */
    @Test
    public void editPdfAddAnnotationsTest()  {
        AddPdfAnnotationRequest request = null;
        byte[] response = api.editPdfAddAnnotations(request).block();

        // TODO: test validations
    }
    
    /**
     * Convert a PDF file to PDF/A
     *
     * Converts the input PDF file to a PDF/A-1b or PDF/A-2b standardized PDF.
     */
    @Test
    public void editPdfConvertToPdfATest()  {
        org.springframework.core.io.AbstractResource inputFile = null;
        String conformanceLevel = null;
        byte[] response = api.editPdfConvertToPdfA(inputFile, conformanceLevel).block();

        // TODO: test validations
    }
    
    /**
     * Decrypt and password-protect a PDF
     *
     * Decrypt a PDF document with a password.  Decrypted PDF will no longer require a password to open.
     */
    @Test
    public void editPdfDecryptTest()  {
        String password = null;
        org.springframework.core.io.AbstractResource inputFile = null;
        byte[] response = api.editPdfDecrypt(password, inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Remove, delete pages from a PDF document
     *
     * Remove one or more pages from a PDF document
     */
    @Test
    public void editPdfDeletePagesTest()  {
        Integer pageStart = null;
        Integer pageEnd = null;
        org.springframework.core.io.AbstractResource inputFile = null;
        byte[] response = api.editPdfDeletePages(pageStart, pageEnd, inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Encrypt and password-protect a PDF
     *
     * Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
     */
    @Test
    public void editPdfEncryptTest()  {
        org.springframework.core.io.AbstractResource inputFile = null;
        String userPassword = null;
        String ownerPassword = null;
        String encryptionKeyLength = null;
        byte[] response = api.editPdfEncrypt(inputFile, userPassword, ownerPassword, encryptionKeyLength).block();

        // TODO: test validations
    }
    
    /**
     * Get PDF annotations, including comments in the document
     *
     * Enumerates the annotations, including comments and notes, in a PDF document.
     */
    @Test
    public void editPdfGetAnnotationsTest()  {
        org.springframework.core.io.AbstractResource inputFile = null;
        GetPdfAnnotationsResult response = api.editPdfGetAnnotations(inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Gets PDF Form fields and values
     *
     * Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
     */
    @Test
    public void editPdfGetFormFieldsTest()  {
        org.springframework.core.io.AbstractResource inputFile = null;
        PdfFormFields response = api.editPdfGetFormFields(inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Get PDF document metadata
     *
     * Returns the metadata from the PDF document, including Title, Author, etc.
     */
    @Test
    public void editPdfGetMetadataTest()  {
        org.springframework.core.io.AbstractResource inputFile = null;
        PdfMetadata response = api.editPdfGetMetadata(inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Get text in a PDF document by page
     *
     * Gets the text in a PDF by page
     */
    @Test
    public void editPdfGetPdfTextByPagesTest()  {
        org.springframework.core.io.AbstractResource inputFile = null;
        String textFormattingMode = null;
        PdfTextByPageResult response = api.editPdfGetPdfTextByPages(inputFile, textFormattingMode).block();

        // TODO: test validations
    }
    
    /**
     * Insert, copy pages from one PDF document into another
     *
     * Copy one or more pages from one PDF document (source document) and insert them into a second PDF document (destination document).
     */
    @Test
    public void editPdfInsertPagesTest()  {
        Integer pageStartSource = null;
        Integer pageEndSource = null;
        Integer pageInsertBeforeDesitnation = null;
        org.springframework.core.io.AbstractResource sourceFile = null;
        org.springframework.core.io.AbstractResource destinationFile = null;
        byte[] response = api.editPdfInsertPages(pageStartSource, pageEndSource, pageInsertBeforeDesitnation, sourceFile, destinationFile).block();

        // TODO: test validations
    }
    
    /**
     * Linearize and optimize a PDF for streaming download
     *
     * Linearizes the content of a PDF to optimize it for streaming download, particularly over web streaming.
     */
    @Test
    public void editPdfLinearizeTest()  {
        org.springframework.core.io.AbstractResource inputFile = null;
        byte[] response = api.editPdfLinearize(inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Rasterize a PDF to an image-based PDF
     *
     * Rasterize a PDF into an image-based PDF.  The output is a PDF where each page is comprised of a high-resolution image, with all text, figures and other components removed.
     */
    @Test
    public void editPdfRasterizeTest()  {
        org.springframework.core.io.AbstractResource inputFile = null;
        byte[] response = api.editPdfRasterize(inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Reduce the file size and optimize a PDF
     *
     * Reduces the file size and optimizes the content of a PDF to minimize its file size.
     */
    @Test
    public void editPdfReduceFileSizeTest()  {
        org.springframework.core.io.AbstractResource inputFile = null;
        BigDecimal quality = null;
        byte[] response = api.editPdfReduceFileSize(inputFile, quality).block();

        // TODO: test validations
    }
    
    /**
     * Remove all PDF annotations, including comments in the document
     *
     * Removes all of the annotations, including comments and notes, in a PDF document.
     */
    @Test
    public void editPdfRemoveAllAnnotationsTest()  {
        org.springframework.core.io.AbstractResource inputFile = null;
        byte[] response = api.editPdfRemoveAllAnnotations(inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Remove a specific PDF annotation, comment in the document
     *
     * Removes a specific annotation in a PDF document, using the AnnotationIndex.  To enumerate AnnotationIndex for all of the annotations in the PDF document, use the /edit/pdf/annotations/list API.
     */
    @Test
    public void editPdfRemoveAnnotationItemTest()  {
        Integer annotationIndex = null;
        org.springframework.core.io.AbstractResource inputFile = null;
        byte[] response = api.editPdfRemoveAnnotationItem(annotationIndex, inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Change PDF Document&#39;s Paper Size
     *
     * Resizes a PDF document&#39;s paper size.
     */
    @Test
    public void editPdfResizeTest()  {
        String paperSize = null;
        org.springframework.core.io.AbstractResource inputFile = null;
        byte[] response = api.editPdfResize(paperSize, inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Rotate all pages in a PDF document
     *
     * Rotate all of the pages in a PDF document by a multiple of 90 degrees
     */
    @Test
    public void editPdfRotateAllPagesTest()  {
        Integer rotationAngle = null;
        org.springframework.core.io.AbstractResource inputFile = null;
        byte[] response = api.editPdfRotateAllPages(rotationAngle, inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Rotate a range, subset of pages in a PDF document
     *
     * Rotate a range of specific pages in a PDF document by a multiple of 90 degrees
     */
    @Test
    public void editPdfRotatePageRangeTest()  {
        Integer rotationAngle = null;
        Integer pageStart = null;
        Integer pageEnd = null;
        org.springframework.core.io.AbstractResource inputFile = null;
        byte[] response = api.editPdfRotatePageRange(rotationAngle, pageStart, pageEnd, inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Sets ands fills PDF Form field values
     *
     * Fill in the form fields in a PDF form with specific values.  Use form/get-fields to enumerate the available fields and their data types in an input form.
     */
    @Test
    public void editPdfSetFormFieldsTest()  {
        SetPdfFormFieldsRequest fieldValues = null;
        byte[] response = api.editPdfSetFormFields(fieldValues).block();

        // TODO: test validations
    }
    
    /**
     * Sets PDF document metadata
     *
     * Sets (writes) metadata into the input PDF document, including Title, Author, etc.
     */
    @Test
    public void editPdfSetMetadataTest()  {
        SetPdfMetadataRequest request = null;
        byte[] response = api.editPdfSetMetadata(request).block();

        // TODO: test validations
    }
    
    /**
     * Encrypt, password-protect and set restricted permissions on a PDF
     *
     * Encrypt a PDF document with a password, and set permissions on the PDF.  Set an owner password to control owner (editor/creator) permissions [required], and set a user (reader) password to control the viewer of the PDF [optional].  Set the reader password to null to omit the password.  Restrict or allow printing, copying content, document assembly, editing (read-only), form filling, modification of annotations, and degraded printing through document Digital Rights Management (DRM).
     */
    @Test
    public void editPdfSetPermissionsTest()  {
        String ownerPassword = null;
        String userPassword = null;
        org.springframework.core.io.AbstractResource inputFile = null;
        String encryptionKeyLength = null;
        Boolean allowPrinting = null;
        Boolean allowDocumentAssembly = null;
        Boolean allowContentExtraction = null;
        Boolean allowFormFilling = null;
        Boolean allowEditing = null;
        Boolean allowAnnotations = null;
        Boolean allowDegradedPrinting = null;
        byte[] response = api.editPdfSetPermissions(ownerPassword, userPassword, inputFile, encryptionKeyLength, allowPrinting, allowDocumentAssembly, allowContentExtraction, allowFormFilling, allowEditing, allowAnnotations, allowDegradedPrinting).block();

        // TODO: test validations
    }
    
    /**
     * Add a text watermark to a PDF
     *
     * Adds a text watermark to a PDF
     */
    @Test
    public void editPdfWatermarkTextTest()  {
        String watermarkText = null;
        org.springframework.core.io.AbstractResource inputFile = null;
        String fontName = null;
        BigDecimal fontSize = null;
        String fontColor = null;
        BigDecimal fontTransparency = null;
        byte[] response = api.editPdfWatermarkText(watermarkText, inputFile, fontName, fontSize, fontColor, fontTransparency).block();

        // TODO: test validations
    }
    
}

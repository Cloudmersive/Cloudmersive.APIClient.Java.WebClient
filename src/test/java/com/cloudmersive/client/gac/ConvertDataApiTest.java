/*
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudmersive.client.gac;

import java.io.File;
import com.cloudmersive.client.gac.model.XmlAddAttributeWithXPathResult;
import com.cloudmersive.client.gac.model.XmlAddChildWithXPathResult;
import com.cloudmersive.client.gac.model.XmlFilterWithXPathResult;
import com.cloudmersive.client.gac.model.XmlQueryWithXQueryMultiResult;
import com.cloudmersive.client.gac.model.XmlQueryWithXQueryResult;
import com.cloudmersive.client.gac.model.XmlRemoveAllChildrenWithXPathResult;
import com.cloudmersive.client.gac.model.XmlRemoveWithXPathResult;
import com.cloudmersive.client.gac.model.XmlReplaceWithXPathResult;
import com.cloudmersive.client.gac.model.XmlSetValueWithXPathResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for ConvertDataApi
 */
@Ignore
public class ConvertDataApiTest {

    private final ConvertDataApi api = new ConvertDataApi();

    
    /**
     * Convert CSV to JSON conversion
     *
     * Convert a CSV file to a JSON object array
     */
    @Test
    public void convertDataCsvToJsonTest()  {
        org.springframework.core.io.AbstractResource inputFile = null;
        Boolean columnNamesFromFirstRow = null;
        Object response = api.convertDataCsvToJson(inputFile, columnNamesFromFirstRow).block();

        // TODO: test validations
    }
    
    /**
     * Convert CSV to XML conversion
     *
     * Convert a CSV file to a XML file
     */
    @Test
    public void convertDataCsvToXmlTest()  {
        org.springframework.core.io.AbstractResource inputFile = null;
        Boolean columnNamesFromFirstRow = null;
        byte[] response = api.convertDataCsvToXml(inputFile, columnNamesFromFirstRow).block();

        // TODO: test validations
    }
    
    /**
     * Convert JSON String to XML conversion
     *
     * Convert a JSON object into XML
     */
    @Test
    public void convertDataJsonStringToXmlTest()  {
        String jsonString = null;
        Object response = api.convertDataJsonStringToXml(jsonString).block();

        // TODO: test validations
    }
    
    /**
     * Convert JSON Object to XML conversion
     *
     * Convert a JSON object into XML
     */
    @Test
    public void convertDataJsonToXmlTest()  {
        Object jsonObject = null;
        byte[] response = api.convertDataJsonToXml(jsonObject).block();

        // TODO: test validations
    }
    
    /**
     * Convert Excel (97-2003) XLS to JSON conversion
     *
     * Convert an Excel (97-2003) XLS file to a JSON object array
     */
    @Test
    public void convertDataXlsToJsonTest()  {
        org.springframework.core.io.AbstractResource inputFile = null;
        Object response = api.convertDataXlsToJson(inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Convert Excel XLSX to JSON conversion
     *
     * Convert an Excel XLSX file to a JSON object array
     */
    @Test
    public void convertDataXlsxToJsonTest()  {
        org.springframework.core.io.AbstractResource inputFile = null;
        byte[] response = api.convertDataXlsxToJson(inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Convert Excel XLSX to XML conversion
     *
     * Convert an Excel XLSX file to a XML file
     */
    @Test
    public void convertDataXlsxToXmlTest()  {
        org.springframework.core.io.AbstractResource inputFile = null;
        byte[] response = api.convertDataXlsxToXml(inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Adds an attribute to all XML nodes matching XPath expression
     *
     * Return the reuslts of editing an XML document by adding an attribute to all of the nodes that match an input XPath expression.
     */
    @Test
    public void convertDataXmlEditAddAttributeWithXPathTest()  {
        String xpathExpression = null;
        String xmlAttributeName = null;
        String xmlAttributeValue = null;
        org.springframework.core.io.AbstractResource inputFile = null;
        XmlAddAttributeWithXPathResult response = api.convertDataXmlEditAddAttributeWithXPath(xpathExpression, xmlAttributeName, xmlAttributeValue, inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Adds an XML node as a child to XML nodes matching XPath expression
     *
     * Return the reuslts of editing an XML document by adding an XML node as a child to all of the nodes that match an input XPath expression.
     */
    @Test
    public void convertDataXmlEditAddChildWithXPathTest()  {
        String xpathExpression = null;
        String xmlNodeToAdd = null;
        org.springframework.core.io.AbstractResource inputFile = null;
        XmlAddChildWithXPathResult response = api.convertDataXmlEditAddChildWithXPath(xpathExpression, xmlNodeToAdd, inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes
     *
     * Return the reuslts of editing an XML document by removing all child nodes of the nodes that match an input XPath expression.
     */
    @Test
    public void convertDataXmlEditRemoveAllChildNodesWithXPathTest()  {
        String xpathExpression = null;
        org.springframework.core.io.AbstractResource inputFile = null;
        XmlRemoveAllChildrenWithXPathResult response = api.convertDataXmlEditRemoveAllChildNodesWithXPath(xpathExpression, inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Replaces XML nodes matching XPath expression with new node
     *
     * Return the reuslts of editing an XML document by replacing all of the nodes that match an input XPath expression with a new XML node expression.
     */
    @Test
    public void convertDataXmlEditReplaceWithXPathTest()  {
        String xpathExpression = null;
        String xmlNodeReplacement = null;
        org.springframework.core.io.AbstractResource inputFile = null;
        XmlReplaceWithXPathResult response = api.convertDataXmlEditReplaceWithXPath(xpathExpression, xmlNodeReplacement, inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Sets the value contents of XML nodes matching XPath expression
     *
     * Return the reuslts of editing an XML document by setting the contents of all of the nodes that match an input XPath expression.  Supports elements and attributes.
     */
    @Test
    public void convertDataXmlEditSetValueWithXPathTest()  {
        String xpathExpression = null;
        String xmlValue = null;
        org.springframework.core.io.AbstractResource inputFile = null;
        XmlSetValueWithXPathResult response = api.convertDataXmlEditSetValueWithXPath(xpathExpression, xmlValue, inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Filter, select XML nodes using XPath expression, get results
     *
     * Return the reuslts of filtering, selecting an XML document with an XPath expression
     */
    @Test
    public void convertDataXmlFilterWithXPathTest()  {
        String xpathExpression = null;
        org.springframework.core.io.AbstractResource inputFile = null;
        XmlFilterWithXPathResult response = api.convertDataXmlFilterWithXPath(xpathExpression, inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Query an XML file using XQuery query, get results
     *
     * Return the reuslts of querying a single XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for a single XML document as input.  Provided XML document is automatically loaded as the default context; to access elements in the document, simply refer to them without a document reference, such as bookstore/book
     */
    @Test
    public void convertDataXmlQueryWithXQueryTest()  {
        String xquery = null;
        org.springframework.core.io.AbstractResource inputFile = null;
        XmlQueryWithXQueryResult response = api.convertDataXmlQueryWithXQuery(xquery, inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Query multiple XML files using XQuery query, get results
     *
     * Return the reuslts of querying an XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for multiple XML documents as input.  You can refer to the contents of a given document by name, for example doc(\&quot;books.xml\&quot;) or doc(\&quot;restaurants.xml\&quot;) if you included two input files named books.xml and restaurants.xml.  If input files contain no file name, they will default to file names input1.xml, input2.xml and so on.
     */
    @Test
    public void convertDataXmlQueryWithXQueryMultiTest()  {
        String xquery = null;
        org.springframework.core.io.AbstractResource inputFile1 = null;
        org.springframework.core.io.AbstractResource inputFile2 = null;
        org.springframework.core.io.AbstractResource inputFile3 = null;
        org.springframework.core.io.AbstractResource inputFile4 = null;
        org.springframework.core.io.AbstractResource inputFile5 = null;
        org.springframework.core.io.AbstractResource inputFile6 = null;
        org.springframework.core.io.AbstractResource inputFile7 = null;
        org.springframework.core.io.AbstractResource inputFile8 = null;
        org.springframework.core.io.AbstractResource inputFile9 = null;
        org.springframework.core.io.AbstractResource inputFile10 = null;
        XmlQueryWithXQueryMultiResult response = api.convertDataXmlQueryWithXQueryMulti(xquery, inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10).block();

        // TODO: test validations
    }
    
    /**
     * Remove, delete XML nodes and items matching XPath expression
     *
     * Return the reuslts of editing an XML document by removing all of the nodes that match an input XPath expression
     */
    @Test
    public void convertDataXmlRemoveWithXPathTest()  {
        String xpathExpression = null;
        org.springframework.core.io.AbstractResource inputFile = null;
        XmlRemoveWithXPathResult response = api.convertDataXmlRemoveWithXPath(xpathExpression, inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Convert XML to JSON conversion
     *
     * Convert an XML string or file into JSON
     */
    @Test
    public void convertDataXmlToJsonTest()  {
        org.springframework.core.io.AbstractResource inputFile = null;
        Object response = api.convertDataXmlToJson(inputFile).block();

        // TODO: test validations
    }
    
    /**
     * Transform XML document file with XSLT into a new XML document
     *
     * Convert an XML string or file into JSON
     */
    @Test
    public void convertDataXmlTransformWithXsltToXmlTest()  {
        org.springframework.core.io.AbstractResource inputFile = null;
        org.springframework.core.io.AbstractResource transformFile = null;
        byte[] response = api.convertDataXmlTransformWithXsltToXml(inputFile, transformFile).block();

        // TODO: test validations
    }
    
}
